{"ast":null,"code":"import axios from 'axios'; // import { setAlert } from './alert';\n\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // load user\n\nexport const loadUser = () => async dispatch => {\n  console.log(\"Loading user....\");\n\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/login');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(\"loadUser action ERROR: \" + err);\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // register user\n\nexport const register = ({\n  name,\n  email,\n  phoneNumber,\n  password,\n  password2\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    phoneNumber,\n    password,\n    password2\n  });\n\n  try {\n    const res = await axios.post('/register', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data // jwt token\n\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    // const errors = err.response.data.errors;\n    if (err) {\n      console.log(err);\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data // jwt token\n\n    });\n    dispatch(loadUser()); // dispatch(setAlert('Login success', 'success'));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      console.log(errors);\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // logout / clear profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/mmbower1/Documents/Freelance_Projects/my-own-ish/mikes-ecommerce/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","console","log","localStorage","token","res","get","type","payload","data","err","register","name","email","phoneNumber","password","password2","config","headers","body","JSON","stringify","post","login","errors","response","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\n// import { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// load user\nexport const loadUser = () => async dispatch => {\n  console.log(\"Loading user....\")\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get('/login');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log(\"loadUser action ERROR: \" + err);\n    dispatch({\n      type: AUTH_ERROR\n    })\n  }\n}\n\n// register user\nexport const register = ({ name, email, phoneNumber, password, password2 }) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const body = JSON.stringify({ name, email, phoneNumber, password, password2 })\n  try {\n    const res = await axios.post('/register', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data // jwt token\n    });\n    dispatch(loadUser());\n\n  } catch (err) {\n    // const errors = err.response.data.errors;\n    if (err) {\n      console.log(err);\n    }\n    dispatch({\n      type: REGISTER_FAIL\n    })\n  }\n}\n\n// login user\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const body = JSON.stringify({ email, password });\n  try {\n    const res = await axios.post('/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data // jwt token\n    });\n    dispatch(loadUser());\n    // dispatch(setAlert('Login success', 'success'));\n\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      console.log(errors)\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    })\n  }\n}\n\n// logout / clear profile\nexport const logout = () => dispatch => {\n  dispatch({ type: CLEAR_PROFILE });\n  dispatch({ type: LOGOUT });\n}"]},"metadata":{},"sourceType":"module"}