{"ast":null,"code":"import axios from 'axios'; // import { setAlert } from './alert';\n\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE, SET_ALERT } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // load user\n// export const loadUser = () => async dispatch => {\n//   console.log(\"Loading user....\")\n//   if (localStorage.token) {\n//     setAuthToken(localStorage.token);\n//   }\n//   try {\n//     const res = await axios.get('/api/auth');\n//     dispatch({\n//       type: USER_LOADED,\n//       payload: res.data,\n//     })\n//   } catch (err) {\n//     console.log(\"ERROR: \" + err);\n//     dispatch({\n//       type: AUTH_ERROR\n//     })\n//   }\n// }\n// register user\n\nexport const register = ({\n  name,\n  email,\n  phoneNumber,\n  password,\n  password2\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    phoneNumber,\n    password,\n    password2\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    }); // dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => alert(error.msg, 'danger'));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // login user\n\nexport const login = (email, password) => async dispatch => {\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      SET_ALERT,\n      payload: res.data\n    }); // dispatch(loadUser());\n    // dispatch(setAlert('Login success', 'success'));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => alert(error.msg, 'danger'));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // logout / clear profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/mmbower1/Documents/Freelance_Projects/my-own-ish/mikes-ecommerce/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","SET_ALERT","setAuthToken","register","name","email","phoneNumber","password","password2","dispatch","config","headers","body","JSON","stringify","res","post","type","payload","data","err","errors","response","forEach","error","alert","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\n// import { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE, SET_ALERT } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// load user\n// export const loadUser = () => async dispatch => {\n//   console.log(\"Loading user....\")\n//   if (localStorage.token) {\n//     setAuthToken(localStorage.token);\n//   }\n//   try {\n//     const res = await axios.get('/api/auth');\n//     dispatch({\n//       type: USER_LOADED,\n//       payload: res.data,\n//     })\n\n//   } catch (err) {\n//     console.log(\"ERROR: \" + err);\n//     dispatch({\n//       type: AUTH_ERROR\n//     })\n//   }\n// }\n\n// register user\nexport const register = ({ name, email, phoneNumber, password, password2 }) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const body = JSON.stringify({ name, email, phoneNumber, password, password2 })\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    // dispatch(loadUser());\n\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => alert(error.msg, 'danger'))\n    }\n    dispatch({\n      type: REGISTER_FAIL\n    })\n  }\n}\n\n// login user\nexport const login = (email, password) => async dispatch => {\n  const body = JSON.stringify({ email, password });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS, SET_ALERT,\n      payload: res.data\n    });\n    // dispatch(loadUser());\n    // dispatch(setAlert('Login success', 'success'));\n\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => alert(error.msg, 'danger'))\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    })\n  }\n}\n\n// logout / clear profile\nexport const logout = () => dispatch => {\n  dispatch({ type: CLEAR_PROFILE });\n  dispatch({ type: LOGOUT });\n}"]},"metadata":{},"sourceType":"module"}